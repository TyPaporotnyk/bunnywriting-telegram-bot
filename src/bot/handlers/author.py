from aiogram import F, Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from loguru import logger

from src.bot.filters.user import IsAuthor, IsNotRegisteredAuthor
from src.bot.keyboards.author import answer_speciality, get_start_keyboard
from src.bot.states.author import ChangeBussinessState, ChangeSpecialityState, RgisterFormState
from src.crm.author import Author
from src.db.services.author import (
    db_register_author,
    get_author_by_telegram_id,
    update_author_busyness,
    update_author_specialities,
)
from src.db.services.lead import get_current_author_payments, get_current_author_tasks
from src.db.services.speciality import get_specialities

router = Router(name="commands")


@router.message(IsNotRegisteredAuthor(), CommandStart())
async def register_author(message: types.Message, state: FSMContext):
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç! üëã\n–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –∫–∞—Ä—Ç–∏, –±–∞–∂–∞–Ω–æ –ø—Ä–∏–≤–∞—Ç —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É (—Ç—ñ–ª—å–∫–∏ –Ω–µ –¥–ª—è –≤–∏–ø–ª–∞—Ç)üí≥"
    )
    await state.set_state(RgisterFormState.get_card)


@router.message(F.text, RgisterFormState.get_card)
async def admin_start(message: types.Message, state: FSMContext, session):
    await state.update_data(get_card=message.text)
    specialities = await get_specialities(session)
    await message.answer(
        '–ß—É–¥–æ–≤–æ! üëç –í–∫–∞–∂–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π, —è–∫—ñ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "‚úÖ–ì–æ—Ç–æ–≤–æ"',
        reply_markup=answer_speciality(specialities).as_markup(resize_keyboard=True),
    )
    await state.set_state(RgisterFormState.get_specialities)


@router.message(RgisterFormState.get_specialities)
async def admin_start_register(message: types.Message, state: FSMContext, session):
    input_message = message.text
    author_id = message.from_user.id

    data = await state.get_data()
    specialities = data.get("get_specialities", [])

    if input_message != "–ì–æ—Ç–æ–≤–æ‚úÖ":
        specialities.append(input_message)
        await state.update_data(get_specialities=specialities)
        return

    card_number = data.get("get_card")
    author = await get_author_by_telegram_id(session, author_id)
    username = message.from_user.username
    telegram_url = f"https://t.me/{username}" if username else ""

    try:
        await Author.register_author(author.id, card_number, specialities, telegram_url)
        await db_register_author(session, author_id, card_number, specialities, telegram_url)
    except Exception as e:
        logger.error(f"Error when register authror: {repr(e)}")
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ —Å–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "–í—ñ—Ç–∞—é! ü•≥ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞. –ë—É–¥—å –Ω–∞ –≥–æ—Ç–æ–≤—ñ, —Å–∫–æ—Ä–æ –±—É–¥—É—Ç—å –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.ü§©",
            reply_markup=types.ReplyKeyboardRemove(),
        )

    await state.clear()


@router.message(IsAuthor(), CommandStart())
async def author_start(message: types.Message):
    await message.reply("–í—ñ—Ç–∞–Ω–Ω—è!", reply_markup=get_start_keyboard().as_markup())


@router.callback_query(F.data == "current_tasks", IsAuthor())
async def get_current_tasks(callback: types.CallbackQuery, session):
    author_id = callback.from_user.id
    author = await get_author_by_telegram_id(session, author_id)
    author_tasks = await get_current_author_tasks(session, author.custom_id)

    if not author_tasks:
        await callback.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å")
        return

    for author_task in author_tasks:
        message = (
            f"üÜî: {author_task.id}\n"
            f"üìå**–°—Ç–∞—Ç—É—Å**: {author_task.status}\n"
            f"‚óΩÔ∏è **–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç**:{author_task.priority}\n"
            f"‚óæÔ∏è –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {author_task.speciality}\n"
            f"‚óΩÔ∏è –í–∏–¥ —Ä–æ–±–æ—Ç–∏: {author_task.work_type}\n"
            f"‚óæÔ∏è –¢–µ–º–∞: {author_task.thema}\n"
            f"‚óΩÔ∏è –û–±—Å—è–≥: {author_task.pages} —Å—Ç.\n"
            f"‚óæÔ∏è –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å: {author_task.uniqueness}\n"
            f"‚óΩÔ∏è –î–µ–¥–ª–∞–π–Ω: {author_task.deadline_for_author}\n"
            f"‚óæÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä: {author_task.note}\n"
            f"üí∏ –¶—ñ–Ω–∞: {author_task.sale}\n"
        )

        await callback.message.answer(message)


@router.callback_query(F.data == "author_payment", IsAuthor())
async def get_author_payment(callback: types.CallbackQuery, session):
    author_id = callback.from_user.id
    author = await get_author_by_telegram_id(session, author_id)
    author_payments = await get_current_author_payments(session, author.custom_id)

    if not author_payments:
        await callback.answer("–ù–µ–º–∞—î –≤–∏–ø–ª–∞—Ç")
        return

    sale_sum = 0
    leads_message = ""
    for author_payment in author_payments:
        sale_sum += author_payment.expenses
        leads_message += f"{author_payment.id} - {author_payment.expenses}\n"

    leads_message += f"\n–°—É–º–∞: {sale_sum}"
    await callback.message.answer(leads_message)


@router.callback_query(F.data == "change_specialities", IsAuthor())
async def change_specialities(callback: types.CallbackQuery, state: FSMContext, session):
    specialities = await get_specialities(session)
    await callback.message.answer(
        '–í–∫–∞–∂–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π, —è–∫—ñ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "‚úÖ–ì–æ—Ç–æ–≤–æ"',
        reply_markup=answer_speciality(specialities).as_markup(resize_keyboard=True),
    )
    await state.set_state(ChangeSpecialityState.get_specialities)


@router.message(F.text, ChangeSpecialityState.get_specialities)
async def get_author_specialities(message: types.Message, state: FSMContext, session):
    author_id = message.from_user.id
    input_message = message.text

    data = await state.get_data()
    specialities = data.get("get_specialities", [])

    if input_message != "–ì–æ—Ç–æ–≤–æ‚úÖ":
        specialities.append(input_message)
        await state.update_data(get_specialities=specialities)
        return

    author = await get_author_by_telegram_id(session, author_id)
    try:
        await Author.update_author_specialities(author.id, specialities)
        await update_author_specialities(session, author.telegram_id, specialities)
    except Exception as e:
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞ –≤ –∑–º—ñ–Ω–µ–Ω–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ!üò¢ \n–ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ —Å–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        logger.error(f"Cant to update plane business: {repr(e)}")
    else:
        await message.answer(
            "–í—ñ—Ç–∞—é! ü•≥ –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –±—É–ª–∏ –∑–º—ñ–Ω–µ–Ω—ñ!",
            reply_markup=types.ReplyKeyboardRemove(),
        )

    await state.clear()


@router.callback_query(F.data == "change_business", IsAuthor())
async def change_business(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–∫–∞–∂–∏ –±–∞–∂–∞–Ω–µ –ø–ª–∞–Ω–æ–≤–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –±—ñ–ª—å—à–µ 20",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.set_state(ChangeBussinessState.get_bussines)


@router.message(F.text.func(lambda message: not message.isdigit()), ChangeBussinessState.get_bussines)
async def action_change_business(message: types.Message):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ, —Ü—ñ–ª–µ —á–∏—Å–ª–æ")


@router.message(F.text, ChangeBussinessState.get_bussines)
async def change_plane_business(message: types.Message, state: FSMContext, session):
    author_id = message.from_user.id
    plane_business = int(message.text)

    if plane_business >= 20:
        await message.reply("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ —è–∫–µ –Ω–µ –±—ñ–ª—å—à–µ –∑–∞ 20")
        return

    author = await get_author_by_telegram_id(session, author_id)

    try:
        await Author.update_author_busyness(author.id, plane_business, author.open_leads)
        await update_author_busyness(session, author.telegram_id, plane_business)
    except Exception as e:
        await message.answer("–ü–ª–∞–Ω–æ–≤–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å –Ω–µ –±—É–ª–∞ –∑–º—ñ–Ω–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
        logger.error(f"Cant to update plane business: {repr(e)}")
    else:
        await message.answer("–ü–ª–∞–Ω–æ–≤–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())

    await state.clear()
