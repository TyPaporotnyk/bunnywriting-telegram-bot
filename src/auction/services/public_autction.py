import asyncio
from typing import List, Optional

from aiogram import types
from loguru import logger

from src.auction.utils import wait_auction_answer
from src.bot.keyboards.author import mailing_buttons
from src.bot.misc import bot
from src.bot.services.broadcaster import send_message
from src.crm.author import Author
from src.crm.lead import Lead
from src.db.schemas import LeadSchema
from src.db.services.author import get_not_busyness_authors, update_author_busyness_and_open_leads


async def send_auction_message(author_id: int, lead: LeadSchema):
    message = (
        "\tüü¢ –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø üü¢\n"
        f"üÜî: {lead.id}\n"
        f"‚óæÔ∏è –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {lead.speciality}\n"
        f"‚óΩÔ∏è –í–∏–¥ —Ä–æ–±–æ—Ç–∏: {lead.work_type}\n"
        f"‚óæÔ∏è –¢–µ–º–∞: {lead.thema}\n"
        f"‚óΩÔ∏è –û–±—Å—è–≥: {lead.pages} —Å—Ç.\n"
        f"‚óæÔ∏è –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å: {lead.uniqueness}\n"
        f"‚óΩÔ∏è –î–µ–¥–ª–∞–π–Ω: {lead.deadline_for_author}\n"
        f"‚óæÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä: {lead.note}\n"
        f"üí∏ –¶—ñ–Ω–∞: {lead.expenses}\n"
    )

    is_success = await send_message(
        bot,
        author_id,
        message,
        keyboard=mailing_buttons(lead.id, "public").as_markup(one_time_keyboard=True),
    )
    return is_success


async def find_authors(lead: LeadSchema, delay: int = 0) -> tuple[bool, LeadSchema]:
    await asyncio.sleep(delay)

    authors = await get_not_busyness_authors(lead.koef, lead.speciality)
    logger.info(f"Deal {lead.id} has {len(authors)} authors")

    flag = False
    for author in authors:
        if await send_auction_message(author.telegram_id, lead):
            answer = await wait_auction_answer(lead, author.telegram_id)

            if answer == "closed":
                logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–¥–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è {lead.id} —ñ–Ω—à–æ–º—É –∞–≤—Ç–æ—Ä—É")
                flag = True
                await send_message(
                    bot,
                    author.telegram_id,
                    f"–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–¥–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è {lead.id} —ñ–Ω—à–æ–º—É –∞–≤—Ç–æ—Ä—É",
                    keyboard=types.ReplyKeyboardRemove(),
                )
                break
            elif answer == "accept":
                open_leads = author.open_leads + 1
                busyness = author.busyness + lead.koef

                await update_author_busyness_and_open_leads(author.telegram_id, busyness, open_leads)
                await Author.update_author_busyness_and_open_leads(author.id, busyness, open_leads)
                await Lead.update_lead_author(lead.id, author.custom_id, author.name, author.admin_id)
                await Lead.update_lead_status(lead.id, 53018611)
                flag = True

                logger.info(f"–ê–≤—Ç–æ—Ä {author.telegram_id} —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞: {lead.id}")
                break
            elif answer == "refuce":
                logger.info(f"–ê–≤—Ç–æ—Ä {author.telegram_id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞: {lead.id}")
            else:
                logger.info(f"–ê–≤—Ç–æ—Ä {author.telegram_id} –Ω–µ –æ—Ç—Ä–µ–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {lead.id}")
                await send_message(
                    bot,
                    author.telegram_id,
                    f"–¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–π–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—è {lead.id} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è",
                    keyboard=types.ReplyKeyboardRemove(),
                )

    return flag, lead
