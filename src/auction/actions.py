import asyncio
from typing import List, Optional

from aiogram import types
from loguru import logger

from src.bot.keyboards.author import mailing_buttons
from src.bot.misc import bot
from src.bot.services.broadcaster import broadcast, send_message
from src.bot.services.redis import (
    delete_action,
    get_lead_answers,
    get_public_auction_answer,
    set_public_auction_answer,
)
from src.crm.author import Author
from src.crm.lead import Lead
from src.db.schemas import LeadSchema
from src.db.services.author import get_not_busyness_authors, update_author_busyness_and_open_leads


async def send_auction_message(author_id: int, lead: LeadSchema):
    message = (
        "\tüü¢ –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø üü¢\n"
        f"üÜî: #{lead.id}\n"
        f"‚óæÔ∏è –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {lead.speciality}\n"
        f"‚óΩÔ∏è –í–∏–¥ —Ä–æ–±–æ—Ç–∏: {lead.work_type}\n"
        f"‚óæÔ∏è –¢–µ–º–∞: {lead.thema}\n"
        f"‚óΩÔ∏è –û–±—Å—è–≥: {lead.pages} —Å—Ç.\n"
        f"‚óæÔ∏è –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å: {lead.uniqueness}\n"
        f"‚óΩÔ∏è –î–µ–¥–ª–∞–π–Ω: {lead.deadline_for_author}\n"
        f"‚óæÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä: {lead.note}\n"
        f"üí∏ –¶—ñ–Ω–∞: {lead.expenses}\n"
    )

    is_success = await send_message(
        bot,
        author_id,
        message,
        keyboard=mailing_buttons(lead.id, "public").as_markup(one_time_keyboard=True),
    )
    return is_success


async def send_private_auction_messages(author_ids: List[int], lead: LeadSchema):
    message = (
        "\tüü°–ê–£–ö–¶–Ü–û–ùüü°\n"
        f"üÜî: #{lead.id}\n"
        f"‚óæÔ∏è –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {lead.speciality}\n"
        f"‚óΩÔ∏è –í–∏–¥ —Ä–æ–±–æ—Ç–∏: {lead.work_type}\n"
        f"‚óæÔ∏è –¢–µ–º–∞: {lead.thema}\n"
        f"‚óΩÔ∏è –û–±—Å—è–≥ {lead.pages} —Å—Ç.\n"
        f"‚óæÔ∏è –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å: {lead.uniqueness}\n"
        f"‚óΩÔ∏è –î–µ–¥–ª–∞–π–Ω: {lead.deadline_for_author}\n"
        f"‚óæÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä: {lead.note}\n"
    )

    await broadcast(
        bot,
        author_ids,
        message,
        keyboard=mailing_buttons(lead.id, "private").as_markup(one_time_keyboard=True),
    )


async def wait_auction_answer(lead: LeadSchema, author_id) -> Optional[str]:
    time = 0
    answer = ""

    await delete_action(lead.id)
    await set_public_auction_answer(lead.id, author_id, "wait")
    while True:
        await asyncio.sleep(5)

        answer = await get_public_auction_answer(lead.id, author_id)

        if answer in ["accept", "refuce"] or time >= 300:
            break

        time += 5

    await delete_action(lead.id)
    return answer


async def find_authors(lead: LeadSchema, delay: int = 0) -> tuple[bool, LeadSchema]:
    await asyncio.sleep(delay)

    authors = await get_not_busyness_authors(lead.koef, lead.speciality)
    logger.info(f"Deal {lead.id} has {len(authors)} authors")

    flag = False
    for author in authors:
        if await send_auction_message(author.telegram_id, lead):
            answer = await wait_auction_answer(lead, author.telegram_id)

            if answer == "accept":
                open_leads = author.open_leads + 1
                busyness = author.busyness + lead.koef

                await update_author_busyness_and_open_leads(author.telegram_id, busyness, open_leads)
                await Author.update_author_busyness_and_open_leads(author.id, busyness, open_leads)
                await Lead.update_lead_author(lead.id, author.custom_id, author.name, author.admin_id)
                await Lead.update_lead_status(lead.id, 53018611)
                flag = True

                logger.info(f"–ê–≤—Ç–æ—Ä {author.telegram_id} —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞: {lead.id}")
                break
            elif answer == "refuce":
                logger.info(f"–ê–≤—Ç–æ—Ä {author.telegram_id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞: {lead.id}")
            else:
                logger.info(f"–ê–≤—Ç–æ—Ä {author.telegram_id} –Ω–µ –æ—Ç—Ä–µ–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {lead.id}")
                await send_message(
                    bot,
                    author.telegram_id,
                    f"–¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–π–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—è #{lead.id} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è",
                    keyboard=types.ReplyKeyboardRemove(),
                )

    return (flag, lead)


async def find_private_authors(lead: Lead, delay: int = 0) -> tuple[bool, Lead]:
    await asyncio.sleep(delay)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ
    authors = await get_not_busyness_authors(lead.speciality)

    logger.info(f"Private deal {lead.id} has {len(authors)} authors")

    if not authors:
        return (False, lead)

    # –ü–æ–ª—É—á–∞–µ–º id –∞–≤—Ç–æ—Ä–æ–≤ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –∏–º –≤—Å–µ–º –ø—Ä–∏–∫–≥–ª–∞—â–µ–Ω–∏–µ –Ω–∞ —É—á–∞—Å—Ç–∏–µ
    author_ids = [author.telegram_id for author in authors]
    await delete_action(lead.id)
    for author_id in author_ids:
        await set_public_auction_answer(lead.id, author_id, "wait")
    await send_private_auction_messages(author_ids, lead)

    # –ñ–¥–µ—Ç –ø–æ–∫–∞ –∞–≤—Ç–æ—Ä—ã —É—Å–ø–µ—é—Ç –¥–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã
    # await asyncio.sleep(1800)
    await asyncio.sleep(1800)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
    author_rates = await get_lead_answers(lead.id)
    await delete_action(lead.id)
    author_ids_with_prices = [
        (author_id, author_rates[author_id]) for author_id in author_rates if author_rates[author_id].isdigit()
    ]
    author_ids_with_prices = sorted(author_ids_with_prices, key=lambda s: int(s[1]))
    logger.debug(author_ids_with_prices)

    if not author_ids_with_prices:
        return (True, lead)

    if len(author_ids_with_prices) >= 1:
        author_data = author_ids_with_prices[0]
        author_id = author_data[0]
        price = author_data[1]

        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –ø–æ –µ–≥–æ –∞–π–¥–∏ –∏–∑ —É–∂–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤
        author = [author for author in authors if author.telegram_id == int(author_id)][0]

        open_leads = author.open_leads + 1
        busyness = author.busyness + lead.koef

        # –í–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤ CRM
        await update_author_busyness_and_open_leads(author.telegram_id, busyness, open_leads)
        await Author.update_author_busyness_and_open_leads(author.id, busyness, open_leads)
        await Lead.update_lead_author(lead.id, author.custom_id, author.name, author.admin_id)
        await Lead.update_lead_price(lead.id, price)
        await Lead.update_lead_status(lead.id, 53018611)

        logger.info(f"–ê–≤—Ç–æ—Ä [{author.telegram_id}] —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞ [{lead.id}]")

        await send_message(
            bot,
            author.telegram_id,
            f"üòé–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ID {lead.id} –ø–µ—Ä–µ–º–æ–≥–ª–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤`—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é –≤ —Å–∫–æ—Ä–æ–º—É —á–∞—Å—É.",
            keyboard=types.ReplyKeyboardRemove(),
        )

    if len(author_ids_with_prices) >= 2:
        author_data = author_ids_with_prices[1]
        author_id = author_data[0]
        price = author_data[1]

        author = [author for author in authors if author.telegram_id == int(author_id)][0]

        await Lead.update_lead_second_author(lead.id, author.name)
        await Lead.update_lead_second_price(lead.id, price)

        logger.info(f"–ê–≤—Ç–æ—Ä [{author.telegram_id}] —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∑–∞–ø–∞—Å–Ω—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞")

    await broadcast(
        bot,
        author_ids,
        f"–¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–π–æ–º—É —É—á–∞—Å—Ç—ñ –≤ –∞—É–∫—Ü—ñ–æ–Ω—ñ #{lead.id} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è",
        keyboard=types.ReplyKeyboardRemove(),
    )

    return (True, lead)
